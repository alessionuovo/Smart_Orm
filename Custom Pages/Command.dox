/*!
 \page Command Command Design Pattern
  
<summary>This pattern is needed to encapsulate request with object, log operations, transactions \n
and in this project is used for transactions execute where the transaction is change in ERD Diagram Model
</summary>
 <h2 style="color:Aqua"> Pattern Benefits for Project </h2>

 Using the pattern
it helps to manage changes that occur in diagram and store them permanently in files in later point,
and adds flexibility for adding other logging in future.
<h2 style="color:Aqua;"> Description Of Usage In Project </h2>
 <div style="border:2px solid aqua; font-size:16px;">
In the project class DiagramManagement.ChangeManager serves as Invoker  that contains SortedList where key is name of table/connection and value is ICommand interface that
is basic interface for generic interface DiagramManagement.IChangeCommand where generic parameter is type of object in which changes occur to store.
This interface defines the store element and server as basic interface of
 three classes that serve as ConcreteCommand: DiagramManagement.AddCommand, DiagramManagement.DeleteCommand and DiagramManagement.UpdateCommand. DiagramManagement.AddCommand stores in memory all add changes in system, DiagramManagement.UpdateCommand stores all update changes , and delete stores all delete changes. \n
Moreover, FileManagement.DbDefinitionsManager class that manage permanent store of crud changes to files acts as Receiver.
Finally, Smart_Orm.MainWindow serves as the client. 

 
 </div>
 
  
<h2> Diagram </h2>

\image html CommandDiagram.jpg
 
 \section commandother Other Patterns in Project
 \ref Singleton \n
 \ref Builder \n
 \ref Facade \n
 \ref  Template  \n
 \ref Visitor \n
 \ref Strategy \n
 
*/